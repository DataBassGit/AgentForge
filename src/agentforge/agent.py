from typing import Any, Dict, List, Optional
from agentforge.llm import LLM
from agentforge.utils.functions.Logger import Logger
from agentforge.utils.function_utils import Functions


class Agent:
    def __init__(self):
        """
        Initializes an Agent instance, setting up its name, logger, data attributes, and agent-specific configurations.
        It attempts to load the agent's configuration data and storage settings.
        """
        self.agent_name: str = self.__class__.__name__
        self.logger: Logger = Logger(name=self.agent_name)

        self.data: Dict[str, Any] = {}
        self.prompt: Optional[List[str]] = None
        self.result: Optional[str] = None
        self.output: Optional[str] = None

        if not hasattr(self, 'agent_data'):  # Prevent re-initialization
            self.agent_data: Optional[Dict[str, Any]] = None

        try:
            self.functions: Functions = Functions()
        except Exception as e:
            self.logger.log(f"Error during initialization of {self.agent_name}: {e}", 'error')
            raise

    def run(self, **kwargs: Any) -> Optional[str]:
        """
        Orchestrates the execution of the agent's workflow: loading data, processing data, generating prompts,
        running language models, parsing results, saving results, and building the output.

        Parameters:
            **kwargs (Any): Keyword arguments that will form part of the agent's data.

        Returns:
            Optional[str]: The output generated by the agent or None if an error occurred during execution.
        """
        try:
            self.logger.log(f"\n{self.agent_name} - Running...", 'info')
            self.load_data(**kwargs)
            self.process_data()
            self.generate_prompt()
            self.run_llm()
            self.parse_result()
            self.save_to_storage()
            self.build_output()
            self.data = {}
            self.logger.log(f"\n{self.agent_name} - Done!", 'info')
        except Exception as e:
            self.logger.log(f"Error running agent: {e}", 'error')
            return None

        return self.output

    def load_data(self, **kwargs: Any) -> None:
        """
        Central method for data loading that orchestrates the loading of agent data, persona-specific data,
        storage data, and any additional data.

        Parameters:
            **kwargs (Any): Keyword arguments for additional data loading.
        """
        self.load_kwargs(**kwargs)
        self.load_agent_data()
        self.load_persona_data()
        self.load_from_storage()
        self.load_additional_data()

    def load_kwargs(self, **kwargs: Any) -> None:
        """
        Loads the variables passed to the agent as data.

        Parameters:
            **kwargs (Any): Additional keyword arguments to be merged into the agent's data.
        """
        try:
            for key in kwargs:
                self.data[key] = kwargs[key]
        except Exception as e:
            self.logger.log(f"Error loading kwargs: {e}", 'error')

    def load_agent_data(self) -> None:
        """
        Loads the agent's configuration data including parameters and prompts.
        """
        try:
            self.agent_data = self.functions.agent_utils.load_agent_data(self.agent_name).copy()
            self.data.update({
                'params': self.agent_data.get('params').copy(),
                'prompts': self.agent_data['prompts'].copy()
            })
        except Exception as e:
            self.logger.log(f"Error loading agent data: {e}", 'error')

    def load_persona_data(self) -> None:
        """
        Loads the persona data for the agent if available.
        """
        persona = self.agent_data.get('persona', {})
        if persona:
            for key in persona:
                self.data[key.lower()] = persona[key]

    def load_from_storage(self) -> None:
        """
        Placeholder for loading from storage. Meant to be overridden by custom agents to implement specific loading
        from storage logic.

        Note: The storage instance for an Agent is set at self.agent_data['storage']
        """
        pass

    def load_additional_data(self) -> None:
        """
        Placeholder for loading additional data. Meant to be overridden by custom agents as needed.
        """
        pass

    def process_data(self) -> None:
        """
        Placeholder for data processing. Meant to be overridden by custom agents for specific data processing needs.
        """
        pass

    def generate_prompt(self) -> None:
        """
        Generates the prompt(s) for the language model based on template data. It handles the rendering of prompt
        templates and aggregates them into a list.
        """
        try:
            rendered_prompts: List[str] = []
            for prompt_template in self.data['prompts'].values():
                template = self.functions.prompt_handling.handle_prompt_template(prompt_template, self.data)
                if template:
                    rendered_prompt = self.functions.prompt_handling.render_prompt_template(template, self.data)
                    rendered_prompts.append(rendered_prompt)

            self.prompt = rendered_prompts
        except Exception as e:
            self.logger.log(f"Error generating prompt: {e}", 'error')
            self.prompt = None

    def run_llm(self) -> None:
        """
        Executes the language model generation with the generated prompt(s) and any specified parameters.
        """
        try:
            model: LLM = self.agent_data['llm']
            params: Dict[str, Any] = self.agent_data.get("params", {})
            params['agent_name'] = self.agent_name
            self.result = model.generate_text(self.prompt, **params).strip()
        except Exception as e:
            self.logger.log(f"Error running LLM: {e}", 'error')
            self.result = None

    def parse_result(self) -> None:
        """
        Placeholder for result parsing. Meant to be overridden by custom agents to implement specific result parsing
        logic.
        """
        pass

    def save_to_storage(self) -> None:
        """
        Placeholder for saving results to storage. Meant to be overridden by custom agents to implement specific
        saving to storage logic.

        Note: The storage instance for an Agent is set at self.agent_data['storage']
        """
        pass

    def build_output(self) -> None:
        """
        Constructs the output from the result. This method can be overridden by subclasses to customize the output.
        By default, it simply sets the output as the model's response.
        """
        self.output = self.result
