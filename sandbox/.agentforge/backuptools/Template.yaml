# Template for Tool YAML Definition

# The name of the tool as it should appear to the agent.
Name: Tool Name

# List of arguments the tool accepts.
Args:
  - arg1_name (type)
  # Indicate if an argument is optional by adding ', optional'.
  - arg2_name (type, optional)
  # Add more arguments as needed.

# The command or function name to be called when using the tool.
Command: command_name

# A brief description of what the tool does.
Description: |-
  Provide a concise description of the tool's functionality.

# Instructions on how to use the tool.
Instruction: |-
  To use the 'Tool Name' tool, follow these steps:
  1. Call the `command_name` function/method with the following arguments:
     - `arg1_name`: Description of the first argument.
     - `arg2_name`: (Optional) Description of the second argument.
     # Add descriptions for additional arguments as needed.
  2. The function/method returns [describe the return value].
  3. Use the [output/result] as needed in your application.

# Provide a practical code example demonstrating how to use the tool.
Example: |-
  # Example usage of the 'Tool Name' tool:

  # Import the necessary class or function.
  from package.module import ClassName or command_name

  # If the tool is a class, create an instance.
  tool_instance = ClassName()

  # Call the method/function with the required arguments.
  output = tool_instance.command_name(arg1_value, arg2_value)
  print(output)  # Output: [Expected output]

  # If the tool is a standalone function, call it directly.
  output = command_name(arg1_value, arg2_value)
  print(output)  # Output: [Expected output]

# The script path to the module where the tool's implementation resides.
Script: package.module.ClassName or command_name
